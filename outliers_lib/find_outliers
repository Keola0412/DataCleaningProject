import numpy as np
import pandas as pd 

def outliers_iqr_mod(data, feature, left=1.5, right=1.5, log_scale=False):
    """Находит выбросы в данных, используя метод межквартильного размаха
    классический метод модифицирован путем добавления:
    - возможности логарифмирования
    - ручного управления величиной размаха в обе стороны

    Args:
        data (_type_): набор данных_
        feature (_type_): имя признака
        left (float, optional): величина размаха влево, по умолчанию - 1,5
        right (float, optional): величина размаха вправо, по умолчанию - 1,5
        log_scale (bool, optional): режим логарифмирования, по умолчанию - False

    Returns:
        pandas.DataFrame: наблюдения, попавшие в разряд выбросов
        pandas.DataFrame: очищенный от выбросов датасет
    """
    if log_scale:
        x = np.log(data[feature]+1)
    else:
        x = data[feature]
    
    quartile_1, quartile_3 = x.quantile(0.25), x.quantile(0.75),
    iqr = quartile_3 - quartile_1
    lower_bound = quartile_1 - (iqr * left)
    upper_bound = quartile_3 + (iqr * right)
    outliers = data[(x < lower_bound) | (x > upper_bound)]
    cleaned = data[(x >= lower_bound) & (x <= upper_bound)]
    return outliers, cleaned

def outliers_z_score_mod(data, feature, left=3, right=3, log_scale=False):
    """Находит выбросы в данных, используя метод сигм (z-отклонений)
    классический метод модифицирован путем добавления:
    - возможности логарифмирования
    - ручного управления величиной размаха в обе стороны

    Args:
        data (_type_): набор данных_
        feature (_type_): имя признака
        left (float, optional): величина размаха влево, по умолчанию - 3
        right (float, optional): величина размаха вправо, по умолчанию - 3
        log_scale (bool, optional): режим логарифмирования, по умолчанию - False

    Returns:
        pandas.DataFrame: наблюдения, попавшие в разряд выбросов
        pandas.DataFrame: очищенный от выбросов датасет
    """
    if log_scale:
        x = np.log(data[feature]+1)
    else:
        x = data[feature]
    mu = x.mean()
    sigma = x.std()
    lower_bound = mu - left * sigma
    upper_bound = mu + right * sigma
    outliers = data[(x < lower_bound) | (x > upper_bound)]
    cleaned = data[(x >= lower_bound) & (x <= upper_bound)]
    return outliers, cleaned

def new_function(a, b):
    return np.log(a+b)
